# This file was generated by the Securial engine.

Securial.configure do |config|
  ##### General Configuration
  ## The name of your application (used in notifications, etc.)
  # Default: "Securial"
  config.app_name = "Securial"

  ##### Logging Configuration
  ## Enable or disable logging to file
  # Set to true to log to a file, false to disable file logging
  config.log_to_file = true

  ## Enable or disable logging to STDOUT
  # Set to true to log to STDOUT, false to disable STDOUT logging
  config.log_to_stdout = true # Enable or disable logging to STDOUT

  # Set log level for file logger: :debug, :info, :warn, :error, :fatal, or :unknown
  config.log_file_level = :debug

  # Set log level for stdout logger
  config.log_stdout_level = :debug

  ##### User Roles
  ## Set the role for admin users
  # This role is used to determine access levels and permissions
  # for different user types in the application. including access
  # to specific features and actions.
  # e.g. if the admin role is set to :superuser, then users with this role
  # will have access to the admin dashboard and other admin features.
  # in the `/securial/superusers` namespace.
  config.admin_role = :admin

  ##### Session Configuration
  ## Set the session expiration duration
  # This is the time after which an access session will be considered expired.
  # After this time, the user must use the refresh token to obtain a new session.
  # The user only needs to log in again if the refresh token has also expired.
  # The expiration time is set in seconds, minutes, or hours.
  # The default is 3 minutes.
  config.session_expiration_duration = 3.minutes

  ## Set the session secret
  # This secret is used to sign the session tokens and ensure
  # that they cannot be tampered with. It is important to keep this
  # secret secure and not share it with anyone.
  # It should be a long, random string to ensure security.
  # You can generate a secure secret using a tool like `SecureRandom.hex(64)`
  # or `SecureRandom.base64(64)`.
  # It is recommended to change this secret periodically for security reasons.
  # If you change this secret, all existing sessions will be invalidated,
  # and users will need to log in again.
  # Make sure to keep this secret safe and do not expose it in your codebase.
  # You can use environment variables to store this secret securely.
  # For example, you can set an environment variable `SECURIAL_SESSION_SECRET`
  # and then use it in your configuration like this:
  # config.session_secret = ENV['SECURIAL_SESSION_SECRET']
  # The default is "secret".
  config.session_secret = "secret"

  ## Set the session algorithm
  # This is the algorithm used to sign the session tokens.
  # The default is :hs256, which is a HMAC SHA-256 algorithm.
  # Other options include :hs256, :hs384, and :hs512
  config.session_algorithm = :hs256

  ## Set the session refresh token expiration duration
  # This is the duration after which a refresh token will expire.
  # Once the refresh token expires, the user must log in again.
  # The refresh token is used to obtain a new access token without
  # requiring the user to log in again. It is typically used to keep
  # the user logged in for a longer period without requiring frequent logins.
  # The expiration time is set in seconds, minutes, or hours.
  # The refresh token expiration duration should be longer than the access session
  # expiration duration to allow the user to obtain a new access token
  # without having to log in again. This allows for a better user experience
  # by reducing the frequency of logins while still maintaining security.
  # The default is 1 week.
  config.session_refresh_token_expires_in = 1.week

  ##### Securial Mailer Configuration
  ## Set the mailer sender address
  # This is the email address that will be used as the sender
  # for all emails sent by the Securial engine. This includes
  # emails for password resets, account verification, and other
  # notifications.
  config.mailer_sender = "no-reply@example.com"

  ## Enable or disable sending sign up emails
  # Set to true to send a welcome email on sign up, false to disable.
  config.mailer_sign_up_enabled = true

  ## Set the subject for sign up emails
  # The default is "SECURIAL: Welcome to Our Service".
  config.mailer_sign_up_subject = "SECURIAL: Welcome to Our Service"

  ## Enable or disable sending sign in emails
  # Set to true to send a notification on sign in, false to disable.
  config.mailer_sign_in_enabled = true

  ## Set the subject for sign in emails
  # The default is "SECURIAL: Sign In Notification".
  config.mailer_sign_in_subject = "SECURIAL: Sign In Notification"

  ## Enable or disable sending update account emails
  # Set to true to send a notification when an account is updated, false to disable.
  config.mailer_update_account_enabled = true

  ## Set the subject for update account emails
  # The default is "SECURIAL: Account Update Notification".
  config.mailer_update_account_subject = "SECURIAL: Account Update Notification"

  ## Set the password reset email subject
  # This is the subject line that will be used for the password reset
  # email. The default is "SECURIAL: Password Reset Instructions".
  config.mailer_forgot_password_subject = "SECURIAL: Password Reset Instructions"

  ##### Password configuration
  ## Set the minimum password length
  # This is the minimum length that a password must have
  # in order to be considered valid. The default is 8 characters.
  config.password_min_length = 8

  ## Set the maximum password length
  # This is the maximum length that a password can have
  # in order to be considered valid. The default is 128 characters.
  config.password_max_length = 128

  ## Set the password complexity requirements
  # This is a regular expression (RegEx) that defines the complexity
  # requirements for a password.
  # The password must match this regex in order to be considered valid.
  # The regex can include requirements such as:
  # - At least one uppercase letter
  # - At least one lowercase letter
  # - At least one digit
  # - At least one special character (e.g. !@#$%^&*)
  # - No whitespace characters
  # - No common passwords (e.g. "password", "123456", etc.)
  # You can customize this regex to fit your application's security requirements.
  # The default is a regex that requires at least one uppercase letter,
  # one lowercase letter, one digit, and one special character.
  config.password_complexity = Securial::Helpers::RegexHelper::PASSWORD_REGEX

  ## Set whether passwords expire
  # Set to true if passwords should expire after a period, false to disable expiration.
  # If password expiration is enabled, users will be required to change
  # their password after a certain period of time. This is useful for
  # maintaining security and ensuring that users do not use the same password
  # for an extended period of time. It is recommended to enable password expiration
  # to enhance security, especially for applications that handle sensitive data.
  # The default is true.
  config.password_expires = true

  ## Set the password expiration duration
  # This is the time after which a password will be considered expired,
  # but only if password expiration is enabled (`password_expires = true`).
  # After this time, the user will need to change their password
  # in order to log in again. The expiration time is set in seconds,
  # minutes, or hours. The default is 90 days.
  config.password_expires_in = 90.days

  ## Set the password reset token expiration duration
  # This is the time after which a password reset token will be considered expired.
  # After this time, the token will no longer be valid and the user
  # will need to request a new password reset token. The expiration time
  # is set in seconds, minutes, or hours.
  # This is useful for ensuring that password reset tokens are not valid indefinitely,
  # which helps to prevent unauthorized access to user accounts.
  # It is recommended to set a reasonable expiration time for password reset tokens
  # to balance security and user experience. A shorter expiration time
  # can enhance security by reducing the window of opportunity for an attacker
  # to use a stolen or intercepted token, while a longer expiration time
  # can improve user experience by allowing users to reset their passwords
  # without having to request a new token frequently.
  # The expiration time is set in seconds, minutes, or hours.
  # The default is 2 hours.
  config.reset_password_token_expires_in = 2.hours

  ## Set the password reset token secret
  # This secret is used to sign the password reset tokens and ensure
  # that they cannot be tampered with. It is important to keep this
  # secret secure and not share it with anyone.
  # It should be a long, random string to ensure security.
  # You can generate a secure secret using a tool like `SecureRandom.hex(64)`
  # or `SecureRandom.base64(64)`.
  # It is recommended to change this secret periodically for security reasons.
  # If you change this secret, all existing sessions will be invalidated,
  # and users will need to log in again.
  # Make sure to keep this secret safe and do not expose it in your codebase.
  # You can use environment variables to store this secret securely.
  # For example, you can set an environment variable `SECURIAL_RESET_PASSWORD_SECRET`
  # and then use it in your configuration like this:
  # config.reset_password_token_secret = ENV['SECURIAL_RESET_PASSWORD_SECRET']
  config.reset_password_token_secret = "reset_secret"

  ##### Timestamp Configuration
  ## Set whether to use timestamps in the json responses.
  # The options are:
  # :none - no timestamps will be included in the json responses.
  # :admins_only - the created_at and updated_at timestamps will be included
  #   for admin users. This is useful for keeping the json responses clean
  #   for regular users while still providing timestamps for admin users.
  # :all - the created_at and updated_at timestamps will be included
  #   for all users. This is useful for debugging and development purposes.
  config.timestamps_in_response = :all

  ##### Response Configuration
  ## Set the format of the JSON keys in the responses.
  # The options are:
  # :snake_case - the keys will be in snake_case format.
  # :lowerCamelCase - the keys will be in lowerCamelCase format.
  # :UpperCamelCase - the keys will be in UpperCamelCase format.
  config.response_keys_format = :snake_case

  ##### Security Configuration
  ## Set the security headers to be included in the responses.
  # Read more about security headers here: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers or in the gem documentation.
  # The options are:
  # :default - the default security headers will be included.
  # :strict - the strict security headers will be included.
  config.security_headers = :strict

  ## set whether to enable request rate limiting
  # This is useful for preventing abuse and denial of service attacks.
  config.rate_limiting_enabled = true

  ## Set the rate limit for requests
  # This is the maximum number of requests that a user can make
  # in a given time period. The default is 60 requests per minute.
  # This is only applied if `rate_limiting_enabled` is set to true.
  config.rate_limit_requests_per_minute = 60

  ## Set the rate limit response status code
  # This is the status code that will be returned when a user exceeds
  # the rate limit. The status code should be a 4xx or 5xx code
  # to indicate an error. Commonly used codes are 429 Too Many Requests
  # or 503 Service Unavailable. The default is 429 Too Many Requests.
  # This is only applied if `rate_limiting_enabled` is set to true.
  config.rate_limit_response_status = 429

  ## Set the rate limit response message
  # This is the message that will be returned when a user exceeds
  # the rate limit. The default is "Too many requests, please try again later."
  # This is only applied if `rate_limiting_enabled` is set to true.
  config.rate_limit_response_message = "Too many requests, please try again later."

  ## Set whether to enable other user profiles
  # This allows users to view other users' profiles by their username.
  # If this is set to true, users can access profiles of other users
  # by visiting the URL `/profiles/:username`, where `:username` is the username
  # of the user whose profile they want to view.
  # If this is set to false, users can only view their own profile
  # by visiting the URL `/accounts/me`.
  config.enable_other_profiles = false
end
